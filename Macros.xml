<?xml version="1.0" encoding="UTF-8" standalone="no" ?>

<!DOCTYPE macros SYSTEM "http://www.4d.com/dtd/2007/macros.dtd" >

<!--
Description
This file is created in the 4D folder at the first launch of the database.
It automatically creates several macro commands that can be enriched or modified.
You can also add all the macros required for your own development needs manually.

List of default macro commands.

Logical blocks
_________________________________________________________________________________
If "If" logical block
IfElse "If" logical block with an "Else" proposition
CaseOf "Case" logical block
While "While" logical block
For "For" logical block
Repeat "Repeat" logical block

Frequently-used database blocks
_________________________________________________________________________________
"LoopRecord" Loop on a table selection with saving of record (use a table name as selection)
"LoopRecordNoSave" Loop on a table selection without saving records (use a table name as selection)

Useful blocks
_________________________________________________________________________________
"Header"	Header for method name
"CodeModif" Adds 4D user name and date for development in multi-user environment
-->

<macros>

<!-- Logical blocks -->
<macro name="If">
<text>
If(<caret/>)
<selection/>
End if
</text>
</macro>

<macro name="IfElse">
<text>
If(<caret/>)
<selection/>
Else

End if
</text>
</macro>

<macro name="CaseOf">
<text>
Case of
:(<caret/>)
<selection/>
End case
</text>
</macro>

<macro name="While">
<text>
While(<caret/>)
<selection/>
End while
</text>
</macro>

<macro name="For">
<text>
For(<caret/>;;)
<selection/>
End for
</text>
</macro>

<macro name="Repeat">
<text>
Repeat
<selection/>
Until(<caret/>)
</text>
</macro>

<!-- Frequent database blocks -->
<macro name="BucleRegistro">
<text>
While (Not(End selection(<selection/>)))
<caret/>
Save Record(<selection/>)
Next Record(<selection/>)
End while
</text>
</macro>

<macro name="BucleRegistroSinGuardar">
<text>
While (Not(End selection(<selection/>)))
<caret/>
Next Record(<selection/>)
End while
</text>
</macro>


<!-- Useful blocks -->
<macro name="Encabezado">
<text>
// ----------------------------------------------------
// Usuario (SO): <user_os/>
// Fecha y hora: <date format="0"/>, <time format="0"/>
// ----------------------------------------------------
// Método: <method_name/>
// Descripción
// <caret/>
//
// Parámetros
// ----------------------------------------------------

</text>
</macro>

<macro name="ModifCodigo">
<text>
// Modificado por: <user_os/> (<date format="1"/>)

</text>
</macro>

<macro name="SeleccionaPeriodo">
<text>
_SeleccionaPeriodo 
If (ok=1)
	ORDER BY([Alumnos];[Alumnos]nivel_numero;>;[Alumnos]curso;>;[Alumnos]apellidos_y_nombres;>)
Else 
	vt_ErrorEjecucionScript:="X"
End if
</text>
</macro>

<macro name="ListaDesplegable">
<text>
  //SELECCIÓN ÚNICA
ARRAY TEXT($arreglo;0)
SRtbl_ShowChoiceList (0;"Texto de título";1;->bRepositorio;False;->$arreglo)
If (choiceidx>0)
	C_TEXT($seleccion)
	$seleccion:=$arreglo{choiceidx}
	
Else 
	vt_ErrorEjecucionScript:="X"
End if


//SELECCIÓN MÚLTIPLE
ARRAY TEXT($arreglo;0)
SRtbl_ShowChoiceList (0;"Texto de título";1;->bRepositorio;True;->$arreglo)
If (Size of array(aLinesSelected)>0)
	ARRAY TEXT($seleccion;0)
	For ($x;1;Size of array(aLinesSelected))
		APPEND TO ARRAY($seleccion;$arreglo{aLinesSelected{$x}})
	End for
	
Else 
	vt_ErrorEjecucionScript:="X"
End if
</text>
 </macro>

<macro name="SeleccionaGeneracion">
<text>
C_LONGINT($vl_opcion)
$vl_opcion:=CD_Dlog (0;"¿Cómo desea generar el informe?";"";"Imprimir";"Excel";"Cancelar")
If ($vl_opcion#3)
	
	If ($vl_opcion=1) //imprimir
		
	End if 
	
	If ($vl_opcion=2)  //Excel
		
	End if
	
Else 
	vt_ErrorEjecucionScript:="X"
End if
</text>
 </macro>

<macro name="ExportadorXLS">
<text>
C_TEXT($ruta)
$ruta:=xfGetDirName ("Seleccione carpeta de destino.")
//$ruta:="C:\\Users\\Ignacio Arenas\\Desktop\\"
If ($ruta#"")
	C_TEXT($NomArchivo)
	C_LONGINT($ref;$linea;$col;$Guardar;$termometro)
	$NomArchivo:=$ruta+"NOMBRE DEL INFORME"+DTS_MakeFromDateTime +".xls"
	SYS_CreateFolder (SYS_GetParentNme ($NomArchivo))
	If (SYS_IsWindows )
		USE CHARACTER SET("windows-1252";0)
	Else 
		USE CHARACTER SET("MacRoman";0)
	End if 
	$ref:=XLS Create (1)
	$linea:=1
	
	
	
	XLS Set text value ($ref;1;1;1;Storage.Global.colegio.nombre)
	XLSII_SetCellFontStyle ($ref;1;1;1;Bold)
	XLS Set text value ($ref;1;2;1;"Matriz de Apoderado y cuenta")
	XLS Set text value ($ref;1;3;1;"Fecha de impresión")
	XLS Set text value ($ref;1;3;2;String(Current date(*)))
	
	
	XLS Set text value ($ref;1;$linea;1;"Grupo")
	
	$termometro:=IT_Progress (1;0;0;"")
	For ($x;1;Size of array(aQR_text1))
		$termometro:=IT_Progress (0;$termometro;$x/Size of array(aQR_text1);"")
		XLS Set text value ($ref;1;$linea;1;"Grupo")
	End for
	$termometro:=IT_Progress (-1;$termometro;$x/Size of array(aQR_text1);"")
	
	$Guardar:=XLS Save as ($ref;$NomArchivo)
	XLS CLOSE ($ref)
	USE CHARACTER SET(*;0)
	vt_ErrorEjecucionScript:="X"
	CD_Dlog (0;"La exportación finalizó\n\n.Encontrará el archivo en: \n"+$ruta)
	SHOW ON DISK($NomArchivo)
Else 
	vt_ErrorEjecucionScript:="X"
End if
</text>
 </macro>

<macro name="ContratoAño">
<text>
//MOSTRAR NIVEL PARA CUALQUIER AÑO (CONTRATOS)

SRACT_SelFecha(2)
If (ok=1)
	C_BOOLEAN($continuar)
	Case of 
		: (vlSelAño&gt;&lt;&gt;gYear)
			If ([Alumnos]curso="@adt") | ([Alumnos]curso="pos@")
				QUERY([xxSTR_Niveles];[xxSTR_Niveles]noNivel=[Alumnos]nivel_numero)
				vt_nivel:=[xxSTR_Niveles]nivel
			Else 
				If ([Alumnos]nivel_numero=-1)
					QUERY([xxSTR_Niveles];[xxSTR_Niveles]noNivel=[Alumnos]nivel_numero)
					vt_nivel:=[xxSTR_Niveles]nivel
				Else 
					QUERY([xxSTR_Niveles];[xxSTR_Niveles]noNivel=[Alumnos]nivel_numero+1)
					vt_nivel:=[xxSTR_Niveles]nivel
				End if 
			End if 
			$continuar:=True
		: (vlSelAño=&lt;&gt;gYear)
			QUERY([xxSTR_Niveles];[xxSTR_Niveles]noNivel=[Alumnos]nivel_numero)
			vt_nivel:=[xxSTR_Niveles]nivel
			$continuar:=True
		: (vlSelAño&lt;&lt;&gt;gYear)
			QUERY([Alumnos_Historico];[Alumnos_Historico]Alumno_Numero=[Alumnos]numero;*)
			QUERY([Alumnos_Historico]; &amp; ;[Alumnos_Historico]Año=vlSelAño)
			
			If (Records in selection([Alumnos_Historico])&gt;0)
				QUERY([xxSTR_HistoricoNiveles];[xxSTR_HistoricoNiveles]NumeroNivel=[Alumnos_Historico]Nivel;*)
				QUERY([xxSTR_HistoricoNiveles]; &amp; ;[xxSTR_HistoricoNiveles]Año=vlSelAño)
				vt_nivel:=[xxSTR_HistoricoNiveles]NombreInterno
				$continuar:=True
			Else 
				$continuar:=False
				CD_Dlog (0;"No se encontraron registros históricos para el año ingresado.")
			End if 
			
	End case 
	
	If ($continuar)
		
	Else 
		vt_ErrorEjecucionScript:="X"
	End if
Else 
	vt_ErrorEjecucionScript:="X"
End if
</text>
 </macro>
 
 <macro name="SeleccionaAñoPeriodo">
<text>
//SELECCIÓN DE AÑO Y PERÍODO ACTUAL E HISTÓRICO

SRACT_SelFecha (2)
If (ok=1)
	C_BOOLEAN($continuar)
	
	If (vlSelAño=&lt;&gt;GYEAR)
		_SeleccionaPeriodo 
		If (ok=1)
			$continuar:=True
		Else 
			$continuar:=False
		End if 
	Else 
		KRL_RelateSelection (-&gt;[Alumnos_Historico]Alumno_Numero;-&gt;[Alumnos]numero)
		QUERY SELECTION([Alumnos_Historico];[Alumnos_Historico]Año=vlSelAño)
		
		If (Records in selection([Alumnos_Historico])&gt;0)
			_SeleccionaPeriodoHistorico (vlSelAño;[Alumnos_Historico]Nivel)
			
			If (ok=1)
				$continuar:=True
				KRL_RelateSelection(-&gt;[Alumnos]numero;-&gt;[Alumnos_Historico]Alumno_Numero)
			Else 
				$continuar:=False
			End if
			
		Else 
			$continuar:=False
			CD_Dlog(0;"No se encontraron registros históricos para el año ingresado.")
		End if
	End if
	If ($continuar)
		ORDER BY([Alumnos];[Alumnos]nivel_numero;&gt;;[Alumnos]curso;&gt;;[Alumnos]apellidos_y_nombres;&gt;)
	Else 
		vt_ErrorEjecucionScript:="X"
	End if
Else 
	vt_ErrorEjecucionScript:="X"
End if
</text>
 </macro>


<macro name="ExportadorCSV">
<text>
C_TEXT($ruta)
$ruta:=xfGetDirName ("Seleccione carpeta de destino.")
If ($ruta#"")
	C_LONGINT($linea;$columna;$Guardar;$termometro)
	C_POINTER($ptr)
	C_TEXT($NomArchivo)
	C_TIME($temp)
	$NomArchivo:=$ruta+"Debito_"+DTS_MakeFromDateTime +".txt"
	SYS_CreateFolder (SYS_GetParentNme ($NomArchivo))
	If (SYS_IsWindows )
		USE CHARACTER SET("windows-1252";0)
	Else 
		USE CHARACTER SET("MacRoman";0)
	End if 
	
	$temp:=Create document($NomArchivo)
	If ($temp#?00:00:00?)
		
		$termometro:=IT_Progress (1;0;0;"")
		
		For ($x;1;Size of array(aQR_text1))
			$termometro:=IT_Progress (0;$termometro;$x/Size of array(aQR_text1);"")
			
			IO_SendPacket ($temp;)
			
			IO_SendPacket ($temp;"\r")
			
		End for 
		$termometro:=IT_Progress (-1;$termometro;$x/Size of array(aQR_text1);"")
		
		CLOSE DOCUMENT($temp)
		USE CHARACTER SET(*;0)
		vt_ErrorEjecucionScript:="X"
		CD_Dlog (0;"La exportación finalizó\n\n.Encontrará el archivo en: \n"+$ruta)
		SHOW ON DISK($NomArchivo)
	Else 
		vt_ErrorEjecucionScript:="X"
	End if 
Else 
	vt_ErrorEjecucionScript:="X"
End if 
</text>
 </macro>

<macro name="AgregarHojasXLS">
<text>
ARRAY TEXT($at_cursos;0)
If (Size of array($at_cursos)&gt;=1)  
	C_TEXT($curso)
	For ($y;1;Size of array($at_cursos))
		If ($y&gt;1) 
			XLS Add sheet ($ref)
		End if 
		$curso:=$at_cursos{$y}
		$curso:=Replace string($curso;":";" ")
		$curso:=Replace string($curso;"/";"-")
		$curso:=Replace string($curso;"á";"a")
		$curso:=Replace string($curso;"é";"e")
		$curso:=Replace string($curso;"í";"i")
		$curso:=Replace string($curso;"ó";"o")
		$curso:=Replace string($curso;"ú";"u")
		XLS Set sheet name ($ref;$y;$curso)
	End for 
End if 
</text>
 </macro>

<macro name="OrderBy">
<text>
ORDER BY(<selection/>;)
</text>
 </macro>

<macro name="SetFieldRelation">
<text>
SET FIELD RELATION(<selection/>;Automatic;Do not modify)
QUERY SELECTION(<selection/>;)
ORDER BY(<selection/>;)
SET FIELD RELATION(<selection/>;Structure configuration;Structure configuration)
</text>
 </macro>

<macro name="Termometro">
<text>
C_LONGINT($termometro)
//INDIVIDUAL
$termometro:=IT_Progress(1; 0; 0; "")
For ($x; 1; Size of array($arreglo1))
	$termometro:=IT_Progress(0; $termometro; $x/Size of array($arreglo1); "")
End for 
$termometro:=IT_Progress(-1; $termometro; $x/Size of array($arreglo1); "")

//DOBLE
$termometro:=IT_Progress(1; 0; 0; "")
For ($x; 1; Size of array($arreglo1))
	For ($y; 1; Size of array($arreglo2))
		$termometro:=IT_Progress(0; $termometro; $x/Size of array($arreglo1); ""; $y/Size of array($arreglo2); "")
	End for 
End for 
$termometro:=IT_Progress(-1; $termometro; $x/Size of array($arreglo1); ""; $y/Size of array($arreglo2); "")

//TRIPLE
$termometro:=IT_Progress(1; 0; 0; "")
For ($x; 1; Size of array($arreglo1))
	For ($y; 1; Size of array($arreglo2))
		For ($z; 1; Size of array($arreglo3))
			$termometro:=IT_Progress(0; $termometro; $x/Size of array($arreglo1); ""; $y/Size of array($arreglo2); ""; $z/Size of array($arreglo3); "")
		End for 
	End for 
End for 
$termometro:=IT_Progress(-1; $termometro; $x/Size of array($arreglo1); ""; $y/Size of array($arreglo2); ""; $z/Size of array($arreglo3); "")
</text>
 </macro>

 <macro name="KRL_RelateSelection">
<text>
KRL_RelateSelection(-&gt;;-&gt;)
</text>
 </macro>

<macro name="InformeAprendizajes">
<text>
    //PROPIEDADES
SRACT_SelFecha (2)
  //vlSelAño:=2020
  //ok:=1
If (ok=1)
	ARRAY TEXT(at_periodos;0)
	C_BOOLEAN($continuar)
	If (vlSelAño=&lt;&gt;GYEAR)
		PERIODOS_LoadData ([Alumnos]nivel_numero)
		COPY ARRAY(atSTR_Periodos_Nombre;at_periodos)
		$continuar:=True
	Else 
		KRL_RelateSelection (-&gt;[Alumnos_Historico]Alumno_Numero;-&gt;[Alumnos]numero)
		QUERY SELECTION([Alumnos_Historico];[Alumnos_Historico]Año=vlSelAño)
		If (Records in selection([Alumnos_Historico])&gt;0)
			PERIODOS_LeeDatosHistoricos ([Alumnos_Historico]Nivel;vlSelAño)
			COPY ARRAY(atSTR_Periodos_Nombre;at_periodos)
			$continuar:=True
		Else 
			$continuar:=False
			CD_Dlog (0;"No se encontraron registros históricos, para la selección de alumnos, en el año ingresado.")
		End if 
	End if 
	
	
	If ($continuar)
		APPEND TO ARRAY(at_periodos;"Final")
		SRtbl_ShowChoiceList (0;"Seleccione el período";2;-&gt;brepositorio;False;-&gt;at_periodos)
		  //choiceidx:=3
		vperiodo:=choiceidx
		
		If (choiceidx&gt;0)
			ARRAY LONGINT($numeros;0)
			ARRAY TEXT($asignaturas;0)
			ARRAY TEXT($cursos;0)
			If (vlSelAño=&lt;&gt;GYEAR)
				ARRAY LONGINT($alumnos;0)
				ORDER BY([Alumnos];[Alumnos]nivel_numero;&gt;;[Alumnos]curso;&gt;;[Alumnos]apellidos_y_nombres;&gt;)
				SELECTION TO ARRAY([Alumnos];$alumnos)
				CREATE EMPTY SET([Alumnos_EvaluacionAprendizajes];"$temp")
				For ($x;1;Size of array($alumnos))
					ARRAY LONGINT($temp;0)
					GOTO RECORD([Alumnos];$alumnos{$x})
					SRal_EvaluacionAprendizajes ("inicio")  //cuando no se cargan los aprendizajes 
					C_LONGINT($vl_records)
					SET QUERY DESTINATION(Into variable;$vl_records)
					QUERY([Alumnos_EvaluacionAprendizajes];[Alumnos_EvaluacionAprendizajes]ID_Alumno=[Alumnos]numero)
					SET QUERY DESTINATION(Into current selection)
					  //
					If ($vl_records=0)
						SRal_EvaluacionAprendizajes ("inicio")  //cuando no se cargan los aprendizajes 
					End if 
					
					  //AÑO ACTUAL
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Asignatura;Automatic;Do not modify)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Eje;Automatic;Do not modify)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Dimension;Automatic;Do not modify)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Competencia;Automatic;Do not modify)
					ORDER BY([Alumnos_EvaluacionAprendizajes];[Asignaturas]posicion_en_informes_de_notas;&gt;;[Asignaturas]denominacion_interna;&gt;;[MPA_DefinicionEjes]OrdenamientoNumerico;&gt;;[MPA_DefinicionDimensiones]OrdenamientoNumerico;&gt;;[MPA_DefinicionCompetencias]OrdenamientoNumerico;&gt;)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Competencia;Structure configuration;Structure configuration)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Dimension;Structure configuration;Structure configuration)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Eje;Structure configuration;Structure configuration)
					SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Asignatura;Structure configuration;Structure configuration)
					SELECTION TO ARRAY([Alumnos_EvaluacionAprendizajes];$temp)
					
					For ($y;1;Size of array($temp))
						GOTO RECORD([Alumnos_EvaluacionAprendizajes];$temp{$y})
						QUERY([Asignaturas];[Asignaturas]Numero=[Alumnos_EvaluacionAprendizajes]ID_Asignatura)
						If (Find in array($numeros;[Asignaturas]Numero)&lt;0)
							APPEND TO ARRAY($numeros;[Asignaturas]Numero)
							APPEND TO ARRAY($asignaturas;[Asignaturas]nombre)
							APPEND TO ARRAY($cursos;[Asignaturas]curso)
						End if 
						ADD TO SET([Alumnos_EvaluacionAprendizajes];"$temp")
					End for 
				End for 
				
			Else 
				KRL_RelateSelection (-&gt;[Alumnos]numero;-&gt;[Alumnos_Historico]Alumno_Numero)
				ARRAY LONGINT($alumnos;0)
				ARRAY LONGINT($asig;0)
				SELECTION TO ARRAY([Alumnos]numero;$alumnos)
				AT_NegativeNumericArray (-&gt;$alumnos)
				QUERY WITH ARRAY([Alumnos_EvaluacionAprendizajes]ID_Alumno;$alumnos)
				QUERY SELECTION([Alumnos_EvaluacionAprendizajes];[Alumnos_EvaluacionAprendizajes]Año=vlSelAño)
				CREATE SET([Alumnos_EvaluacionAprendizajes];"$temp")
				SELECTION TO ARRAY([Alumnos_EvaluacionAprendizajes]ID_Asignatura;$asig)
				AT_ABSNumericArray (-&gt;$asig)
				QUERY WITH ARRAY([Asignaturas_Historico]ID_AsignaturaOriginal;$asig)
				ORDER BY([Asignaturas_Historico];[Asignaturas_Historico]Nivel;&gt;;[Asignaturas_Historico]Curso;&gt;;[Asignaturas_Historico]OrdenGeneral;&gt;)
				SELECTION TO ARRAY([Asignaturas_Historico]ID_AsignaturaOriginal;$numeros;[Asignaturas_Historico]Asignatura;$asignaturas;[Asignaturas_Historico]Curso;$cursos)
			End if 
			
			If (Size of array($asignaturas)&gt;0)
				
				SRtbl_ShowChoiceList (0;"Selección de Asignatura";2;-&gt;brepositorio;True;-&gt;$asignaturas;-&gt;$cursos)
				  //APPEND TO ARRAY(ALINESSELECTED;1)
				  //APPEND TO ARRAY(ALINESSELECTED;2)
				  //APPEND TO ARRAY(ALINESSELECTED;3)
				  //APPEND TO ARRAY(ALINESSELECTED;4)
				
				If (Size of array(ALINESSELECTED)&gt;0)
					ARRAY LONGINT(al_asignaturas;0)
					For (vQR_long1;1;Size of array(ALINESSELECTED))
						APPEND TO ARRAY(al_asignaturas;$numeros{ALINESSELECTED{vQR_long1}})
					End for 
					ARRAY LONGINT(al_idAlumnos;0)
					USE SET("$temp")
					
					If (vlSelAño&lt;&lt;&gt;GYEAR)
						AT_NegativeNumericArray (-&gt;al_asignaturas)
					End if 
					
					QUERY SELECTION WITH ARRAY([Alumnos_EvaluacionAprendizajes]ID_Asignatura;al_asignaturas)
					CLEAR SET("$temp")
					CREATE SET([Alumnos_EvaluacionAprendizajes];"Aprendizajes")
					ARRAY LONGINT($alumnos;0)
					SELECTION TO ARRAY([Alumnos_EvaluacionAprendizajes]ID_Alumno;$alumnos)
					AT_ABSNumericArray (-&gt;$alumnos)
					QUERY WITH ARRAY([Alumnos]numero;$alumnos)
					ORDER BY([Alumnos];[Alumnos]nivel_numero;&gt;;[Alumnos]curso;&gt;;[Alumnos]apellidos_y_nombres;&gt;)
				Else 
					vt_ErrorEjecucionScript:="Cancel"
				End if 
			Else 
				vt_ErrorEjecucionScript:="Cancel"
				CD_Dlog (0;"No se encontraron aprendizajes para generar el reporte.")
			End if 
		Else 
			vt_ErrorEjecucionScript:="Cancel"
		End if 
	Else 
		vt_ErrorEjecucionScript:="Cancel"
	End if 
Else 
	vt_ErrorEjecucionScript:="Cancel"
End if 


//INICIO
ARRAY LONGINT(al_aprendizajes; 0)
USE SET("Aprendizajes")
If (vlSelAño=&lt;&gt;GYEAR)
	QUERY SELECTION([Alumnos_EvaluacionAprendizajes]; [Alumnos_EvaluacionAprendizajes]ID_Alumno=[Alumnos]numero)
	QUERY SELECTION WITH ARRAY([Alumnos_EvaluacionAprendizajes]ID_Asignatura; al_asignaturas)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Asignatura; Automatic; Do not modify)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Eje; Automatic; Do not modify)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Dimension; Automatic; Do not modify)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Competencia; Automatic; Do not modify)
	//QUERY SELECTION BY FORMULA([Alumnos_EvaluacionAprendizajes];([Alumnos_EvaluacionAprendizajes]BIT_Periodo ?? vPeriodo) | ([Alumnos_EvaluacionAprendizajes]BIT_Periodo ?? 0) | ([Alumnos_EvaluacionAprendizajes]BIT_Periodo=0))
	ORDER BY([Alumnos_EvaluacionAprendizajes]; [Asignaturas]ordenGeneral; &gt;; [Asignaturas]denominacion_interna; &gt;; [MPA_DefinicionEjes]OrdenamientoNumerico; &gt;; [MPA_DefinicionDimensiones]OrdenamientoNumerico; &gt;; [MPA_DefinicionCompetencias]OrdenamientoNumerico; &gt;)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Competencia; Structure configuration; Structure configuration)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Dimension; Structure configuration; Structure configuration)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Eje; Structure configuration; Structure configuration)
	SET FIELD RELATION([Alumnos_EvaluacionAprendizajes]ID_Asignatura; Structure configuration; Structure configuration)
Else 
	ARRAY LONGINT($temp1; 0)
	ARRAY LONGINT($temp2; 0)
	ARRAY LONGINT($temp3; 0)
	ARRAY LONGINT($temp4; 0)
	ARRAY TEXT($temp5; 0)
	QUERY([Alumnos_Historico]; [Alumnos_Historico]Alumno_Numero=[Alumnos]numero; *)
	QUERY([Alumnos_Historico];  &amp; ; [Alumnos_Historico]Año=vlSelAño)
	QUERY SELECTION([Alumnos_EvaluacionAprendizajes]; [Alumnos_EvaluacionAprendizajes]ID_Alumno=[Alumnos]numero*-1; *)
	QUERY SELECTION([Alumnos_EvaluacionAprendizajes];  &amp; ; [Alumnos_EvaluacionAprendizajes]Año=vlSelAño)
	//QUERY SELECTION BY FORMULA([Alumnos_EvaluacionAprendizajes];([Alumnos_EvaluacionAprendizajes]BIT_Periodo ?? vPeriodo) | ([Alumnos_EvaluacionAprendizajes]BIT_Periodo ?? 0) | ([Alumnos_EvaluacionAprendizajes]BIT_Periodo=0))
	SET AUTOMATIC RELATIONS(True; False)
	SELECTION TO ARRAY([Alumnos_EvaluacionAprendizajes]; $temp1; [Asignaturas_Historico]OrdenGeneral; $temp5; [Alumnos_EvaluacionAprendizajes]OrdenEje; $temp2; [Alumnos_EvaluacionAprendizajes]OrdenDimension; $temp3; [Alumnos_EvaluacionAprendizajes]OrdenCompetencia; $temp4)
	MULTI SORT ARRAY($temp5; &gt;; $temp2; &gt;; $temp3; &gt;; $temp4; &gt;; $temp1; &gt;)
	CREATE SELECTION FROM ARRAY([Alumnos_EvaluacionAprendizajes]; $temp1)
	SET AUTOMATIC RELATIONS(False; False)
End if 

SELECTION TO ARRAY([Alumnos_EvaluacionAprendizajes]; al_aprendizajes)


//CUERPO
C_TEXT(vt_enunciado; vt_eval)
C_POINTER($ptr)
GOTO RECORD([Alumnos_EvaluacionAprendizajes]; al_aprendizajes{SRRECORD})
If (vlSelAño=&lt;&gt;GYEAR)
	Case of 
		: ([Alumnos_EvaluacionAprendizajes]Tipo_Objeto=Logro_Aprendizaje)
			QUERY([MPA_DefinicionCompetencias]; [MPA_DefinicionCompetencias]ID=[Alumnos_EvaluacionAprendizajes]ID_Competencia)
			[Alumnos_EvaluacionAprendizajes]Enunciado:=[MPA_DefinicionCompetencias]Competencia
			
		: ([Alumnos_EvaluacionAprendizajes]Tipo_Objeto=Dimension_Aprendizaje)
			QUERY([MPA_DefinicionDimensiones]; [MPA_DefinicionDimensiones]ID=[Alumnos_EvaluacionAprendizajes]ID_Dimension)
			[Alumnos_EvaluacionAprendizajes]Enunciado:=[MPA_DefinicionDimensiones]Dimension
			
		: ([Alumnos_EvaluacionAprendizajes]Tipo_Objeto=Eje_Aprendizaje)
			QUERY([MPA_DefinicionEjes]; [MPA_DefinicionEjes]ID=[Alumnos_EvaluacionAprendizajes]ID_Eje)
			[Alumnos_EvaluacionAprendizajes]Enunciado:=[MPA_DefinicionEjes]Nombre
	End case 
End if 
vt_enunciado:=[Alumnos_EvaluacionAprendizajes]Enunciado
//[Alumnos_EvaluacionAprendizajes]
$ptr:=KRL_GetFieldPointerByName("[Alumnos_EvaluacionAprendizajes]Periodo"+String(vPeriodo)+"_NativoLiteral")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_EvaluacionAprendizajes]Periodo"+String(vPeriodo)+"_Indicador")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_EvaluacionAprendizajes]Periodo"+String(vPeriodo)+"_Observaciones")
vt_eval:=$ptr-&gt;

</text>
 </macro>

<macro name="CalcularMontos">
<text>
  //CALCULAR MONTO DEL CARGO EN MONEDA VARIABLE, EN BASE A UNA FECHA
C_DATE($d_fecha)
C_REAL($vr_monto)
$vr_monto:=ACTcar_CalculaMontos ("redondeadoFromCurrentRecordsMEmision";-&gt;[ACT_Cargos]Monto_Neto;-&gt;[ACT_Cargos]Monto_Neto;$d_fecha)

  //CALCULAR MONTO PAGADO, DESDE LAS TRANSACCIONES
ARRAY LONGINT($al_recNumTransacciones;0)
C_REAL($vr_monto)
QUERY SELECTION([ACT_Transacciones];[ACT_Transacciones]Glosa#"@Balanceo Descuento@";*)
QUERY SELECTION([ACT_Transacciones]; &amp; ;[ACT_Transacciones]Glosa#"@Pago con Descuento@")
SELECTION TO ARRAY([ACT_Transacciones];$al_recNumTransacciones)

$vr_monto:=ACTtra_CalculaMontos ("calculaFromRecNum";-&gt;$al_recNumTransacciones;-&gt;[ACT_Transacciones]Debito)

  //MONTO A PAGAR DESDE EL AVISO, CUALQUIER MONEDA
C_DATE($d_fecha)
C_REAL($vr_monto)
$vr_monto:=ACTcar_CalculaSaldo ("retornaSaldoMonedaPago";$d_fecha;-&gt;[ACT_Avisos_de_Cobranza]Monto_a_Pagar;-&gt;[ACT_Avisos_de_Cobranza]Moneda)
</text>
 </macro>

<macro name="PunterosAlumno">
<text>
//PUNTEROS DE ALUMNO
C_POINTER($ptr)
//[Alumnos_Calificaciones]
$ptr:=KRL_GetFieldPointerByName("[Alumnos_Calificaciones]P0"+String(vperiodo)+"_Eval"+String($i; "00")+"_Literal") 
$ptr:=KRL_GetFieldPointerByName("[Alumnos_Calificaciones]P0"+String(vperiodo)+"_Final_Literal")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_Calificaciones]P0"+String(vperiodo)+"_Control_Literal")

//[Alumnos_EvaluacionAprendizajes]
$ptr:=KRL_GetFieldPointerByName("[Alumnos_EvaluacionAprendizajes]Periodo"+String(vPeriodo)+"_NativoLiteral")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_EvaluacionAprendizajes]Periodo"+String(vPeriodo)+"_Indicador")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_EvaluacionAprendizajes]Periodo"+String(vPeriodo)+"_Observaciones")

//[Alumnos_ComplementoEvaluacion]
$ptr:=KRL_GetFieldPointerByName("[Alumnos_ComplementoEvaluacion]P0"+String(vperiodo)+"_Esfuerzo")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_ComplementoEvaluacion]P0"+String(vperiodo)+"_Inasistencias")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_ComplementoEvaluacion]P0"+String(vperiodo)+"_Obs_Academicas")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_ComplementoEvaluacion]P0"+String(vperiodo)+"_Objetivos")

//[Alumnos_SintesisAnual]
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Anotaciones_Negativas")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Anotaciones_Positivas")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_HorasEfectivas")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Atrasos_Jornada")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Atrasos_Sesiones")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Castigos")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_PorcentajeAsistencia")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Inasistencias_Dias")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_Observaciones_Academicas")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_PromedioInterno_Literal")
$ptr:=KRL_GetFieldPointerByName("[Alumnos_SintesisAnual]P0"+String(vperiodo)+"_PromedioOficial_Literal")
</text>
 </macro>

<macro name="UsarImagenExterna">
<text>
//USAR RECURSO DE IMAGEN EXTERNA (FIRMAS, LOGOS, ETC).
C_PICTURE($imagen)
C_TEXT($rutaBase; $archivo; $ruta)
$rutaBase:=sys_getRutaBaseDatos
$archivo:="NOMBRE ARCHIVO IMAGEN"
$ruta:=$rutaBase+"logos"+Folder separator+$archivo
READ PICTURE FILE($ruta; $imagen)
</text>
 </macro>

<macro name="CalcularTramos">
<text>
ARRAY LONGINT($al_cargos; 0)
C_REAL($montoDescto; $montoPagado; $montoTotal)
C_POINTER($ptr)
SELECTION TO ARRAY([ACT_Cargos]; $al_cargos)
For ($x; 1; Size of array($al_cargos))
	GOTO RECORD([ACT_Cargos]; $al_cargos{$x})
	QUERY([xxACT_Items]; [xxACT_Items]ID=[ACT_Cargos]Ref_Item)
	$montoDescto:=0
	QUERY([ACT_Cargos]; [ACT_Cargos]ID_CargoRelacionado=[ACT_Cargos]ID)
	If (Records in selection([ACT_Cargos])&gt;0)  //si hay descuentos, se restarán del cargo asociado
		$montoDescto:=Abs(Sum([ACT_Cargos]Monto_Neto))
	End if 
	$montoTotal:=0
	GOTO RECORD([ACT_Cargos]; $al_cargos{$x})
	QUERY([ACT_Transacciones]; [ACT_Transacciones]ID_Item=[ACT_Cargos]ID)
	QUERY SELECTION([ACT_Transacciones]; [ACT_Transacciones]Fecha&gt;=vd_fecha1; *)
	QUERY SELECTION([ACT_Transacciones];  &amp; ; [ACT_Transacciones]Fecha&lt;=vd_fecha2)
	QUERY SELECTION([ACT_Transacciones]; [ACT_Transacciones]Glosa#"@Pago con descuento@"; *)
	QUERY SELECTION([ACT_Transacciones];  &amp; ; [ACT_Transacciones]Glosa#"@Balanceo descuento@")
	ARRAY LONGINT($al_recNumTransacciones; 0)
	SELECTION TO ARRAY([ACT_Transacciones]; $al_recNumTransacciones)
	$montoPagado:=ACTtra_CalculaMontos("calculaFromRecNum"; -&gt;$al_recNumTransacciones; -&gt;[ACT_Transacciones]Debito)
	$montoTotal:=([ACT_Cargos]Monto_Neto-$montoDescto)-$montoPagado
	
	$montoTotalCopia:=$montoTotal
	$l_Decimales:=Num(ACTcar_OpcionesGenerales("numeroDecimales"; -&gt;[ACT_Cargos]Moneda))
	
	// buscar y calcular tramos solo para cargos originales
	// los cargos que son tramos están asociados al mismo ítem que su cargo original, y suman más valor del que corresponde.
	ARRAY LONGINT($al_tramos; 0)
	If ([ACT_Cargos]Ref_RecargoTramo="")
		KRL_FindAndLoadRecordByIndex(-&gt;[xxACT_Items]ID; -&gt;[ACT_Cargos]Ref_Item)
		QUERY([xxACT_ItemsTramos]; [xxACT_ItemsTramos]id_item_de_cargo=[xxACT_Items]ID)
		ORDER BY([xxACT_ItemsTramos]; [xxACT_ItemsTramos]dia_tramo_desde; &gt;)
		SELECTION TO ARRAY([xxACT_ItemsTramos]; $al_tramos)
	Else 
		ARRAY LONGINT($al_tramos; 0)
	End if 
	
	If (Size of array($al_tramos)&gt;0)
		For ($y; 1; Size of array($al_tramos))
			$montoTotal:=0
			$montoRecargo:=0
			GOTO RECORD([xxACT_ItemsTramos]; $al_tramos{$y})
			If ([xxACT_ItemsTramos]es_monto_fijo)
				$montoTotal:=Abs($montoTotalCopia)+[xxACT_ItemsTramos]valor
			Else 
				$montoTotal:=Abs($montoTotalCopia)+Round((Abs($montoTotalCopia)*[xxACT_ItemsTramos]valor)/100; 2)
				$montoRecargo:=Round((Abs($montoTotalCopia)*[xxACT_ItemsTramos]valor)/100; 2)
			End if 
			
			$ptr:=Get pointer("$ar_totalTramo"+String($y))
			If ($y=1)  //si es el tramo 1, son montos originales
				APPEND TO ARRAY($ptr-&gt;; $montoNeto)
			Else   //si no, son solo los recargos
				APPEND TO ARRAY($ptr-&gt;; $montoRecargo)
			End if 
		End for   //tramos
	Else 
		APPEND TO ARRAY($ar_totalTramo1; $montoNeto)
	End if 
End for   //cargos
CLEAR SET("$Transacciones")
CLEAR SET("$car_all")
//TOTALES
C_TEXT(vt_totalVcto1; vt_totalVcto2; vt_totalVcto3)
C_REAL($vr_totalTramo1; $vr_totalTramo2; $vr_totalTramo3)
$vr_totalTramo1:=Sum($ar_totalTramo1)
$vr_totalTramo2:=vr_totalTramo1+Sum($ar_totalTramo2)
$vr_totalTramo3:=vr_totalTramo2+Sum($ar_totalTramo3)

vt_totalVcto1:=String($vr_totalTramo1; "|Despliegue_Act")
vt_totalVcto2:=String($vr_totalTramo2; "|Despliegue_Act")
vt_totalVcto3:=String($vr_totalTramo3; "|Despliegue_Act")
</text>
 </macro>
 <macro name="Crea_QR">
<text>
C_PICTURE(vp_QR)

C_OBJECT(zint_params;$status;$data)
C_PICTURE(vBarcode)
C_TEXT(vt_ver;vt_cuit;vt_ptoVta;vt_tipoCmp;vt_nroCmp;vt_tipoDocRec;vt_nroDocRec;vt_codAut;vt_fecha;vt_importe;vt_ctz;vt_modena;vt_tipoCodAut)

vp_Logo:=_LogoInstitucion
vt_data:=String([Alumnos]numero)+"/"+[Alumnos]apellidos_y_nombres+"/ "+SR_FormatoRUT2 ([Alumnos]RUT)+"/ "+[Alumnos]curso


  //codificación
TEXT TO BLOB(vt_data;$x_textoIn;UTF8 text without length)
C_TEXT(vt_base64)
BASE64 ENCODE($x_textoIn;vt_base64)


C_BLOB($vx_inblob)
C_LONGINT($vl_ref;$vl_error)
C_PICTURE($vb_picture;vQr_picture1)

$vl_ref:=hmBC_New 
hmBC_SET SYMBOLOGY ($vl_ref;hmBC_QR Code)

SET BLOB SIZE($vx_inblob;0)
CONVERT FROM TEXT(vt_data;"UTF-8";$vx_inblob)

$vl_error:=hmBC_Encode ($vl_ref;$vx_inblob)
If ($vl_error=0)
	$vl_error:=hmBC_Render To Picture ($vl_ref;hmBC_Output_SVG;$vb_picture)
End if 
vQr_picture1:=$vb_picture
hmBC_DELETE ($vl_ref)
</text>
 </macro>

 <macro name="Obs_x_Asignatura">
	<text>
		QUERY([Alumnos_Calificaciones]; [Alumnos_Calificaciones]ID_Alumno=[Alumnos]numero; *)
QUERY([Alumnos_Calificaciones];  &amp; ;  [Alumnos_Calificaciones]NombreOficialAsignatura="@AULA@")

QUERY([Alumnos_ComplementoEvaluacion]; [Alumnos_ComplementoEvaluacion]Llave_Principal=[Alumnos_Calificaciones]Llave_principal)

C_POINTER($ptr)

$ptr:=KRL_GetFieldPointerByName("[Alumnos_ComplementoEvaluacion]P0"+String(vperiodo)+"_Obs_Academicas")

	</text>
 </macro>
<macro name="ExportadorXLSWorkBook">
<text>
C_TEXT($ruta)
$ruta:=xfGetDirName("Seleccione carpeta de destino.")
//$ruta:="C:\\Users\\Ignacio Arenas\\Desktop\\"
If ($ruta#"")
	C_TEXT($NomArchivo; $sheetName; $encabezados)
	C_LONGINT($book; $linea; $col; $Guardar; $sheet; $cell; $merge; $termometro)
	$NomArchivo:=$ruta+"Nombre_Informe_"+DTS_MakeFromDateTime+".xls"
	SYS_CreateFolder(SYS_GetParentNme($NomArchivo))
	If (SYS_IsWindows)
		USE CHARACTER SET("windows-1252"; 0)
	Else 
		USE CHARACTER SET("MacRoman"; 0)
	End if 
	$book:=XLS WORKBOOK Create
	$sheetName:="Hoja1"
	$sheet:=XLS WORKBOOK Create sheet($book; $sheetName)
	//Conteo parte de cero. Parámetros:  hoja;fila;columna;formato;valor
	$cell:=XLS WORKSHEET Set cell text($sheet; 0; 0; 0; Storage.Global.colegio.nombre)
	XLS CELL SET BOLDNESS($cell; 0)
	$cell:=XLS WORKSHEET Set cell text($sheet; 1; 0; 0; "Título del Informe")
	$cell:=XLS WORKSHEET Set cell text($sheet; 2; 0; 0; "Fecha de impresión")
	$cell:=XLS WORKSHEET Set cell text($sheet; 2; 1; 0; String(Current date(*)))
	
	//ENCABEZADOS
	
	$cell:=XLS WORKSHEET Set cell text($sheet; 4; 0; 0; "Columna")
	XLS CELL SET BOLDNESS($cell; 0)
	
	//COMBINAR CELDAS
	//parámetros:  hoja;filaDesde;columnaDesde;filaHasta;columnaHasta
	//$cell:=XLS WORKSHEET Set cell text($sheet; 4; 1; 0; "Columnas Combinadas")
	//XLS WORKSHEET MERGE CELLS($sheet; 4; 1; 7; 3) //ejemplo cuadrado de 3x3 celdas
	
	//CUERPO
	ARRAY TEXT($arreglo; 0)
	$linea:=5
	$termometro:=IT_Progress(1; 0; 0; "")
	For ($x; 1; Size of array($arreglo))
		$termometro:=IT_Progress(0; $termometro; $x/Size of array($arreglo); "")
		$cell:=XLS WORKSHEET Set cell text($sheet; $linea; 0; 0; "Texto")
		$linea:=$linea+1
	End for 
	$termometro:=IT_Progress(-1; $termometro; $x/Size of array($arreglo); "")
	$Guardar:=XLS WORKBOOK Save document($book; $NomArchivo)
	XLS WORKBOOK CLEAR($book)
	USE CHARACTER SET(*; 0)
	vt_ErrorEjecucionScript:="Cancel"
	CD_Dlog(0; "La exportación finalizó\n\n.Encontrará el archivo en: \n"+$ruta)
	SHOW ON DISK($NomArchivo)
Else 
	vt_ErrorEjecucionScript:="Cancel"
End if 
</text>
 </macro>

 <macro name="SeleccionaFechas">
<text>
SR_SeleccionaFecha
_SeleccionaMes
SRACT_SelFecha(2)
SRACT_SelFecha(5)
If (ok=1)
	QUERY([ACT_Cargos]; [ACT_Cargos]FechaEmision&gt;=vinidate; *)
	QUERY([ACT_Cargos];  &amp; ; [ACT_Cargos]FechaEmision&lt;=venddate)
	QUERY([ACT_Cargos]; [ACT_Cargos]FechaEmision&gt;=vd_fecha1; *)
	QUERY([ACT_Cargos];  &amp; ; [ACT_Cargos]FechaEmision&lt;=vd_fecha2)
	QUERY([ACT_Cargos]; [ACT_Cargos]Año=vlSelAño)
	QUERY([ACT_Cargos]; [ACT_Cargos]Mes=vi_selectedMonth)
	
	If (Records in selection([ACT_Cargos])&gt;0)
		
	Else 
		vt_ErrorEjecucionScript:="X"
		CD_Dlog(0; "No se encontraron registros en el período seleccionado.")
	End if 
Else 
	vt_ErrorEjecucionScript:="X"
End if 
</text>
 </macro>


<macro name="ResponsableNivel">
<text>
//BUSCAR RESPONSABLE DE NIVEL
ARRAY TEXT($cargos; 0)

If (vlSelAño=Storage.Global.config.año)
	QUERY([xxSTR_Niveles]; [xxSTR_Niveles]nivelNumero=[Alumnos]numero)
Else 
	QUERY([xxSTR_Niveles]; [xxSTR_Niveles]nivelNumero=[Alumnos_Historico]Alumno_Numero)
End if 

OB GET ARRAY([xxSTR_Niveles]OB_responsable; "cargo"; $cargos)
$pos:=Find in array($cargos; "Coordinador@")

If ($pos&gt;0)
	ARRAY LONGINT($ids)
	C_TEXT(vt_coordinador)
	OB GET ARRAY([xxSTR_Niveles]OB_responsable; "id"; $ids)
	QUERY([Profesores]; [Profesores]Numero=$ids{$pos})
	vt_coordinador:=[Profesores]Nombres_apellidos
End if 
</text>
 </macro>
<<<<<<< HEAD

  <macro name="AsistenciaMensual">
<text>
//CÁLCULO DE ASISTENCIA MENSUAL, POR ALUMNO
C_REAL($vr_totalMensual; $vr_inasistencias; $vr_pctAsistencia; $vr_pctInasistencia; $modoAsis)
C_DATE($vd_fechaInicio; $vd_fechaTermino)

//QUERY([Alumnos]; [Alumnos]numero=95)
//QUERY([Alumnos]; [Alumnos]numero=361)
//vlSelAño:=2021
//$vl_mes:=6

//FECHAS DEL MES A CALCULAR
$vd_fechaInicio:=Date(String("01")+"-"+String($vl_mes; "00")+"-"+String(vlSelAño))
$dia:=DT_GetLastDay($vl_mes; vlSelAño)
$vd_fechaTermino:=Date(String($dia; "00")+"-"+String($vl_mes)+"-"+String(vlSelAño))

//OBTENER EL MODO DE REGISTRO DE ASISTENCIA

If (vlSelAño=&lt;&gt;gyear)
	QUERY([xxSTR_Niveles]; [xxSTR_Niveles]nivelNumero=[Alumnos]nivel_numero)
	$modoAsis:=[xxSTR_Niveles]AttendanceMode
Else 
	QUERY([Alumnos_Historico]; [Alumnos_Historico]Alumno_Numero=[Alumnos]numero; *)
	QUERY([Alumnos_Historico];  &amp; ; [Alumnos_Historico]Año=vlSelAño)
	QUERY([xxSTR_HistoricoNiveles]; [xxSTR_HistoricoNiveles]NumeroNivel=[Alumnos_Historico]Nivel)
	QUERY([xxSTR_HistoricoNiveles];  &amp; ; [xxSTR_HistoricoNiveles]Año=vlSelAño)
	$modoAsis:=[xxSTR_HistoricoNiveles]ModoRegistroAsistencia
End if 


If ($modoAsis=1)  //ASISTENCIA DIARIA
	If (vlSelAño=&lt;&gt;gyear)
		QUERY([Alumnos_Inasistencias]; [Alumnos_Inasistencias]Alumno_Numero=[Alumnos]numero)
		PERIODOS_LoadData([Alumnos]nivel_numero)
	Else 
		QUERY([Alumnos_Inasistencias]; [Alumnos_Inasistencias]Alumno_Numero=[Alumnos]numero*-1; *)
		QUERY([Alumnos_Inasistencias];  &amp; ; [Alumnos_Inasistencias]Año=vlSelAño)
		PERIODOS_LeeDatosHistoricos([Alumnos_Inasistencias]Nivel_Numero; vlSelAño)
	End if 
	
	//1. EL 100% SERÁ LA CANTIDAD DE DÍAS HÁBILES EN EL MES SELECCIONADO
	$vr_totalMensual:=DT_GetWorkingDays($vd_fechaInicio; $vd_fechaTermino)
	
	//2. SE BUSCA LA CANTIDAD DE INASISTENCIAS, BASADO EN LOS REGISTROS DE AUSENCIA PARA EL MES SELECCIONADO
	QUERY SELECTION BY FORMULA([Alumnos_Inasistencias]; Month of([Alumnos_Inasistencias]Fecha)=$vl_mes)
	$vr_inasistencias:=Records in selection([Alumnos_Inasistencias])
	
	//3. EL % DE INASISTENCIA SE OBTIENE CALCULANDO  ($vr_totalMensual*100)/$vr_inasistencias
	$vr_pctInasistencia:=Round(($vr_inasistencias*100)/$vr_totalMensual; 2)
	
	//4. EL % DE ASISTENCIA SE OBTIENE CALCULANDO 100-$vr_pctInasistencia
	$vr_pctAsistencia:=Round(100-$vr_pctInasistencia; 2)
	
Else   //ASISTENCIA POR HORA DETALLADA
	If (vlSelAño=&lt;&gt;gyear)
		QUERY([Alumnos_SintesisAnual]; [Alumnos_SintesisAnual]ID_Alumno=[Alumnos]numero)
		PERIODOS_LoadData([Alumnos]nivel_numero)
	Else 
		QUERY([Alumnos_SintesisAnual]; [Alumnos_SintesisAnual]ID_Alumno=[Alumnos]numero*-1; *)
		QUERY([Alumnos_SintesisAnual];  &amp; ; [Alumnos_SintesisAnual]Año=vlSelAño)
		PERIODOS_LeeDatosHistoricos([Alumnos_SintesisAnual]NumeroNivel; vlSelAño)
	End if 
	
	//1. EL 100% SERÁ EL TOTAL DE SESIONES REGISTRADAS PARA EL MES SELECCIONADO, PARA  NO HACER UN CÁLCULO FUTURO, EN BASE A SESIONES QUE AÚN NO EXISTEN
	ARRAY LONGINT($al_asig; 0)
	ARRAY REAL($sumAsig; 0)
	
	If (vlSelAño=&lt;&gt;gyear)
		QUERY([Alumnos_Calificaciones]; [Alumnos_Calificaciones]ID_Alumno=[Alumnos]numero)
		SET FIELD RELATION([Alumnos_Calificaciones]ID_Asignatura; Automatic; Do not modify)
		QUERY SELECTION([Alumnos_Calificaciones]; [Asignaturas]Incide_en_Asistencia=True)
		ORDER BY([Alumnos_Calificaciones]; [Asignaturas]ordenGeneral; &gt;)
		SET FIELD RELATION([Alumnos_Calificaciones]ID_Asignatura; Structure configuration; Structure configuration)
	Else 
		QUERY([Alumnos_Calificaciones]; [Alumnos_Calificaciones]ID_Alumno=[Alumnos]numero*-1; *)
		QUERY([Alumnos_Calificaciones];  &amp; ; [Alumnos_Calificaciones]Año=vlSelAño)
		SET FIELD RELATION([Alumnos_Calificaciones]ID_HistoricoAsignatura; Automatic; Do not modify)
		QUERY SELECTION([Alumnos_Calificaciones]; [Asignaturas_Historico]Incide_en_Asistencia=True)
		ORDER BY([Alumnos_Calificaciones]; [Asignaturas_Historico]OrdenGeneral; &gt;)
		SET FIELD RELATION([Alumnos_Calificaciones]ID_HistoricoAsignatura; Structure configuration; Structure configuration)
	End if 
	SELECTION TO ARRAY([Alumnos_Calificaciones]; $al_asig)
	
	
	If (vlSelAño=&lt;&gt;gyear)
		$diasHabiles:=DT_GetWorkingDays($vd_fechaInicio; $vd_fechaTermino)
		
		For ($x; 1; Size of array($al_asig))
			GOTO RECORD([Alumnos_Calificaciones]; $al_asig{$x})
			QUERY([Asignaturas_RegistroSesiones]; [Asignaturas_RegistroSesiones]ID_Asignatura=[Alumnos_Calificaciones]ID_Asignatura)
			QUERY SELECTION([Asignaturas_RegistroSesiones]; [Asignaturas_RegistroSesiones]Año=vlSelAño)
			QUERY SELECTION BY FORMULA([Asignaturas_RegistroSesiones]; Month of([Asignaturas_RegistroSesiones]Fecha_Sesion)=$vl_mes)
			APPEND TO ARRAY($sumAsig; Records in selection([Asignaturas_RegistroSesiones]))
		End for   //asignaturas
		
	Else   //SI ES HISTÓRICO, EL TOTAL DE HORAS EN EL MES SE OBTIENE EN BASE AL TOTAL DE SESIONES REGISTRADAS EN EL MES SELECCIONADO
		For ($x; 1; Size of array($al_asig))
			GOTO RECORD([Alumnos_Calificaciones]; $al_asig{$x})
			QUERY([Asignaturas_RegistroSesiones]; [Asignaturas_RegistroSesiones]ID_HistoricoAsignatura=[Alumnos_Calificaciones]ID_HistoricoAsignatura)
			QUERY SELECTION([Asignaturas_RegistroSesiones]; [Asignaturas_RegistroSesiones]Año=vlSelAño)
			QUERY SELECTION BY FORMULA([Asignaturas_RegistroSesiones]; Month of([Asignaturas_RegistroSesiones]Fecha_Sesion)=$vl_mes)
			APPEND TO ARRAY($sumAsig; Records in selection([Asignaturas_RegistroSesiones]))
		End for   //asignaturas
	End if 
	
	$vr_totalMensual:=Sum($sumAsig)
	
	//2. SE CALCULA EL % DE INASISTENCIA, BASADO EN LOS REGISTROS DE AUSENCIA PARA EL MES SELECCIONADO, SUMANDO  TODAS LAS ASIGNATURAS
	ARRAY REAL($sumAsig; 0)
	If (vlSelAño=&lt;&gt;gyear)
		QUERY([Asignaturas_Inasistencias]; [Asignaturas_Inasistencias]ID_Alumno=[Alumnos]numero)
	Else 
		QUERY([Asignaturas_Inasistencias]; [Asignaturas_Inasistencias]ID_Alumno=[Alumnos]numero*-1; *)
		QUERY([Asignaturas_Inasistencias];  &amp; ; [Asignaturas_Inasistencias]Año=vlSelAño)
	End if 
	QUERY SELECTION BY FORMULA([Asignaturas_Inasistencias]; Month of([Asignaturas_Inasistencias]dateSesion)=$vl_mes)
	//CREATE SET([Asignaturas_Inasistencias]; "Inasistencias")
	
	$vr_inasistencias:=Records in selection([Asignaturas_Inasistencias])
	
	//OPCIONAL. CICLO PARA BUSCAR EL DETALLE POR ASIGNATURA
	
	//For ($x; 1; Size of array($al_asig))
	//USE SET("Inasistencias")
	//GOTO RECORD([Alumnos_Calificaciones]; $al_asig{$x})
	//If (vlSelAño=&lt;&gt;gyear)
	//QUERY SELECTION([Asignaturas_Inasistencias]; [Asignaturas_Inasistencias]ID_Asignatura=[Alumnos_Calificaciones]ID_Asignatura)
	//Else 
	//QUERY SELECTION([Asignaturas_Inasistencias]; [Asignaturas_Inasistencias]ID_HistoricoAsignatura=[Alumnos_Calificaciones]ID_HistoricoAsignatura)
	//End if 
	
	//APPEND TO ARRAY($sumAsig; Records in selection([Asignaturas_Inasistencias]))
	//End for  //asignaturas
	
	//$vr_inasistencias:=Sum($sumAsig)
	
	//3. EL % DE INASISTENCIA SE OBTIENE CALCULANDO  ($vr_totalMensual*100)/$vr_inasistencias
	$vr_pctInasistencia:=Round(($vr_inasistencias*100)/$vr_totalMensual; 2)
	
	//4. EL % DE ASISTENCIA SE OBTIENE CALCULANDO 100-$vr_pctInasistencia
	$vr_pctAsistencia:=Round(100-$vr_pctInasistencia; 2)
	
End if 
</text>
 </macro>

>>>>>>> 4338312403955ac64d76c0d9ea8ec27d71c80706
=======
<macro name="RotarTextoXLS">
<text>
	
	XLS Set text value($ref; 1; $linea; 1; "TEXTO LARGOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO")
	XLS GET FORMAT PROPERTY($ref; 1; $linea; 1; $alignment; $rotation; $textProps; $borderlineTop; $borderlineTopColor; $borderlineLeft; $borderlineLeftColor; $borderlineRight; $borderlineRightColor; $borderlineBottom; $borderlineBottomColor; $pattern; $patternColor; $patternBackColor)
	XLS SET FORMAT PROPERTY($ref; 1; $linea; 1; XLS H Align Justified; 90)
	//se puede cambiar el parametro XLS H Align Justified por XLS V Align Bottom 
	//ya que al rotar el texto también cambia la orientación.
	// por lo tanto, la constante de alineación ya no es H (horizontal), sino V (vertical)
</text>
 </macro>

<macro name="ScriptExcelTT">
<text>
//Variables. SIEMPRE agregar comentario al principio con las variables que usa el reporte. Así, cualquiera que vea el script sabrá qué variables requiere para funcionar.
//vinidate, venddate, vlSelAño, choiceidx, etc. Variables que ya se usan en informes, y que están declaradas en el sistema.

C_TEXT($t_ruta; $NomArchivo)
C_OBJECT(o_generacionReporte)
C_LONGINT($ref; $linea; $col; $Guardar; $termometro)
C_COLLECTION($c_archivosANube; $c_archivosMail)
$c_archivosANube:=New collection
$c_archivosMail:=New collection
o_generacionReporte:=New object
$t_ruta:=SYS_CarpetaAplicacion(CLG_ArchivosAsociados)+"InformesTT"+Folder separator
SYS_CreateFolderOnServer($t_ruta)

$NomArchivo:=$t_ruta+"nombre_informe_"+DTS_MakeFromDateTime+".xls"
SYS_CreateFolder(SYS_GetParentNme($NomArchivo))
If (SYS_IsWindows)
	USE CHARACTER SET("windows-1252"; 0)
Else 
	USE CHARACTER SET("MacRoman"; 0)
End if 
$ref:=XLS Create(1)
$linea:=1

XLS Set text value($ref; 1; $linea; 1; "Encabezado")

$linea:=$linea+1
For ($x; 1; Size of array($arreglo))
	XLS Set text value($ref; 1; $linea; 1; "Columna")
	$linea:=$linea+1
End for 
$Guardar:=XLS Save as($ref; $NomArchivo)
XLS CLOSE($ref)
USE CHARACTER SET(*; 0)
vt_ErrorEjecucionScript:="X"

$c_archivosANube.push($NomArchivo)
$c_archivosMail.push($NomArchivo)
o_generacionReporte.subirArchivosNube:=$c_archivosANube
o_generacionReporte.enviarArchivosMail:=$c_archivosMail
</text>
 </macro>


>>>>>>> d5d4b29bdd703e01b56f47f1a6a8a00a6fca3811
  <!-- Useful SQL statements 
  <macro name="-" in_menu="true" type_ahead="false" in_toolbar="false"><text/></macro>
  
  <macro name="SQL_USE_4D_Function" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT ID, {fn My4DFunction() AS NUMERIC} /* My4DFunction must have activated the 'Available through SQL' property */
      FROM table
      LIMIT 1 /* Remove or modify this line if you want to apply the function to all or a part of the records */
      INTO :aArray1, :aArray2;
    </text>
  </macro>
  
  <macro name="SQL_USE_FILTERS" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT *
      FROM table
      LIMIT 30 /* Restrict to 30 the number of returned records */
      OFFSET 4 /* Skip the first 4 records before beginning to count for the LIMIT clause */
      INTO :listbox;
    </text>
  </macro>
  
  <macro name="SQL_EXPLICIT_INNER_JOIN" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT name, department
      FROM employees
      INNER JOIN departments
      ON employees.depID = departments.depID
      INTO LISTBOX :aListbox;
    </text>
  </macro>
  
  <macro name="SQL_IMPLICIT_INNER_JOIN" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT name, department
      FROM employees, departments
      WHERE employees.depID = departments.depID
      INTO LISTBOX :aListbox;
    </text>
  </macro>
  
  <macro name="SQL_CROSS_JOIN" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT name, department
      FROM employees
      CROSS JOIN departments
      INTO LISTBOX :aListbox;
    </text>
  </macro>
  
  <macro name="SQL_LEFT_OUTER_JOIN" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT name, department
      FROM employees
      LEFT OUTER JOIN departments
      ON employees.depID = departments.depID
      INTO LISTBOX :aListbox;
    </text>
  </macro>
  
  <macro name="SQL_RIGHT_OUTER_JOIN" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT name, department
      FROM employees
      RIGHT OUTER JOIN departments
      ON employees.depID = departments.depID
      INTO LISTBOX :aListbox;
    </text>
  </macro>
  
  <macro name="SQL_FULL_OUTER_JOIN" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SELECT name, department
      FROM employees
      FULL OUTER JOIN departments
      ON employees.depID = departments.depID
      INTO LISTBOX :aListbox;
    </text>
  </macro>
  
  <macro name="SQL_REPLICATE_IN_ARRAYS_SHORT" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>REPLICATE id, field1, field2, field3
      FROM remoteTable
      FOR REMOTE STAMP :vRemote_Stamp
      REMOTE OVER LOCAL
      LATEST REMOTE STAMP :vLatest_Remote_Stamp
      INTO :aID, :aField1, :aField2, :aField3;
    </text>
  </macro>
  
  <macro name="SQL_REPLICATE_IN_FIELDS_SHORT" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>REPLICATE id, field1, field2, field3
      FROM remoteTable
      FOR REMOTE STAMP :vRemote_Stamp
      REMOTE OVER LOCAL
      LATEST REMOTE STAMP :vLatest_Remote_Stamp
      INTO localTable (id, field1, field2, field3);
    </text>
  </macro>
  
  <macro name="SQL_REPLICATE_IN_ARRAYS_FULL" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>REPLICATE id, field1, field2, field3
      FROM remoteTable
      WHERE remoteTable.id >= :vComparison_Value /*optionnal*/
      LIMIT :vLimit_Value /*optionnal*/
      OFFSET:vOffset_Value /*optionnal*/
      FOR REMOTE STAMP :vRemote_Stamp,
      LOCAL STAMP :vLocal_Stamp /*optionnal*/
      REMOTE OVER LOCAL /*optionnal*/
      /* or LOCAL OVER REMOTE */
      LATEST REMOTE STAMP :vLatest_Remote_Stamp, /*optionnal*/
      LATEST LOCAL STAMP :vLatest_Local_Stamp /*optionnal*/
      INTO :aID, :aField1, :aField2, :aField3;
    </text>
  </macro>
  
  <macro name="SQL_REPLICATE_IN_FIELDS_FULL" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>REPLICATE id, field1, field2, field3
      FROM remoteTable
      WHERE remoteTable.id >= :vComparison_Value /*optionnal*/
      LIMIT :vLimit_Value /*optionnal*/
      OFFSET :vOffset_Value /*optionnal*/
      FOR REMOTE STAMP :vRemote_Stamp,
      LOCAL STAMP :vLocal_Stamp /*optionnal*/
      REMOTE OVER LOCAL /*optionnal*/
      /* or LOCAL OVER REMOTE */
      LATEST REMOTE STAMP :vLatest_Remote_Stamp, /*optionnal*/
      LATEST LOCAL STAMP :vLatest_Local_Stamp /*optionnal*/
      INTO localTable (id, field1, field2, field3);
    </text>
  </macro>
  
  <macro name="SQL_SYNCHRONIZE" type_ahead="true" in_menu = "true" in_toolbar="false">
    <text>SYNCHRONIZE
      LOCAL localTable (id, field1, field2, field3)
      WITH
      REMOTE remoteTable (id, field1, field2, field3)
      FOR REMOTE STAMP :vRemote_Stamp,
      LOCAL STAMP :vLocal_Stamp /*optionnal*/
      REMOTE OVER LOCAL /*optionnal*/
      /* or LOCAL OVER REMOTE */
      LATEST REMOTE STAMP :vLatest_Remote_Stamp, /*optionnal*/
      LATEST LOCAL STAMP :vLatest_Local_Stamp; /*optionnal*/
    </text>
  </macro>-->
  
</macros> 